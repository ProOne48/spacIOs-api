name: build

on:
  push:
  pull_request:
    branches: [ "main" ]
env:
  DOCKER_IMAGE: spaciosgithubci/spaciosapi
  DOCKER_REPOSITORY: hr-portal-api

jobs:

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Lint
      run: |
        pip install flake8
        flake8 --statistics

  build:
    needs: lint
    name: Build and push Docker image

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Login to DockerHub
      uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
      with:
        images: $DOCKER_IMAGE

    - name: Build and push the Docker image
      uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
      with:
        context: .
        file: ./docker/api.dockerfile
        push: true
        tags: ${{ env.DOCKER_IMAGE }}:${{ github.workflow }}-${{ github.workflow_sha }}
        labels: ${{ steps.meta.outputs.labels }}

  test:
    needs: build
    name: Test
    env:
      DOCKER_IMAGE: spaciosgithubci/spaciosapi


    runs-on: ubuntu-latest
    container:
      image: ${{ env.DOCKER_IMAGE }}:${{ github.workflow }}-${{ github.workflow_sha }}
      env:

        ENV_FOR_DYNACONF: test
        POSTGRES_PASSWORD: 'Very!SecretPassw0rd'
        POSTGRES_USER: 'root'
        DYNACONF_DB_PASS: 'Very!SecretPassw0rd'
        DYNACONF_DB_HOST: 'dbserver'
        DYNACONF_DB_PORT: '5432'
        DYNACONF_DB_USER: 'root'
      ports:
        - 5050:5432
    steps:
    - uses: actions/checkout@v3

    - name: Setup Python 3.10
      uses: actions/setup-python@v4
      with:
          python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Tests
      run: |
        coverage run -m pytest tests
        coverage report -m
        coverage xml
